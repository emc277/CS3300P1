{"version":3,"file":null,"sources":["src/legend.js","src/color.js","src/size.js","src/symbol.js","src/helpers.js","index.js"],"sourcesContent":["import { select } from 'd3-selection'\n\nconst d3_identity =  (d) => d\n\nconst d3_reverse = (arr) => {\n  const mirror = [];\n  for (let i = 0, l = arr.length; i < l; i++) {\n    mirror[i] = arr[l-i-1];\n  }\n  return mirror;\n}\n\n//Text wrapping code adapted from Mike Bostock\nconst d3_textWrapping = (text, width) => {\n  text.each(function() {\n    var text = select(this),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        lineHeight = 1.2, //ems\n        y = text.attr(\"y\"),\n        dy = parseFloat(text.attr(\"dy\")) || 0,\n        tspan = text.text(null)\n          .append(\"tspan\")\n          .attr(\"x\", 0)\n          .attr(\"dy\", dy + \"em\");\n\n    while (word = words.pop()) {\n      line.push(word);\n      tspan.text(line.join(\" \"));\n      if (tspan.node().getComputedTextLength() > width && line.length > 1) {\n        line.pop();\n        tspan.text(line.join(\" \"));\n        line = [word];\n        tspan = text.append(\"tspan\")\n          .attr(\"x\", 0)\n          .attr(\"dy\", lineHeight + dy + \"em\").text(word);\n      }\n    }\n  });\n}\n\n\nconst d3_mergeLabels = (gen=[], labels, domain, range) => {\n\n    if (typeof labels === \"object\"){\n      if(labels.length === 0) return gen;\n\n      let i = labels.length;\n      for (; i < gen.length; i++) {\n        labels.push(gen[i]);\n      }\n      return labels;\n    } else if (typeof labels === \"function\") {\n      const customLabels = []\n      const genLength = gen.length\n      for (let i=0; i < genLength; i++){\n        customLabels.push(labels({\n          i,\n          genLength,\n          generatedLabels : gen,\n          domain,\n          range }))\n      }\n      return customLabels\n    }\n\n    return gen;\n  }\n\nconst d3_linearLegend = (scale, cells, labelFormat) => {\n  let data = [];\n\n  if (cells.length > 1){\n    data = cells;\n\n  } else {\n    const domain = scale.domain(),\n    increment = (domain[domain.length - 1] - domain[0])/(cells - 1)\n    let i = 0;\n\n    for (; i < cells; i++){\n      data.push(domain[0] + i*increment);\n    }\n  }\n\n  const labels = data.map(labelFormat);\n\n  return {data: data,\n          labels: labels,\n          feature: d => scale(d)};\n}\n\nconst d3_quantLegend = (scale, labelFormat, labelDelimiter) => {\n  const labels = scale.range().map( d => {\n    const invert = scale.invertExtent(d);\n    return labelFormat(invert[0]) + \" \" + labelDelimiter + \" \" + labelFormat(invert[1]);\n  });\n\n  return {data: scale.range(),\n          labels: labels,\n          feature: d3_identity\n        };\n}\n\nconst d3_ordinalLegend= scale => ({data: scale.domain(),\n          labels: scale.domain(),\n          feature: d => scale(d) }\n)\n\nconst d3_cellOver = (cellDispatcher, d, obj) => {\n  cellDispatcher.call(\"cellover\", obj, d);\n}\n\nconst d3_cellOut = (cellDispatcher, d, obj) => {\n  cellDispatcher.call(\"cellout\", obj, d);\n}\n\nconst d3_cellClick = (cellDispatcher, d, obj) => {\n  cellDispatcher.call(\"cellclick\", obj, d);\n}\n\n\nexport default {\n\n  d3_drawShapes: (shape, shapes, shapeHeight, shapeWidth, shapeRadius, path) => {\n    if (shape === \"rect\"){\n        shapes.attr(\"height\", shapeHeight).attr(\"width\", shapeWidth);\n\n    } else if (shape === \"circle\") {\n        shapes.attr(\"r\", shapeRadius)//.attr(\"cx\", shapeRadius).attr(\"cy\", shapeRadius);\n\n    } else if (shape === \"line\") {\n        shapes.attr(\"x1\", 0).attr(\"x2\", shapeWidth).attr(\"y1\", 0).attr(\"y2\", 0);\n\n    } else if (shape === \"path\") {\n      shapes.attr(\"d\", path);\n    }\n  },\n\n  d3_addText: function (svg, enter, labels, classPrefix, labelWidth){\n    enter.append(\"text\").attr(\"class\", classPrefix + \"label\");\n    svg.selectAll(`g.${classPrefix}cell text.${classPrefix}label`)\n      .data(labels)\n      .text(d3_identity);\n\n    // if (labelWidth){\n    //   svg.selectAll(`g.${classPrefix}cell text.${classPrefix}label`)\n    //       .call(d3_textWrapping, labelWidth)\n    // }\n  },\n\n  d3_calcType: function (scale, ascending, cells, labels, labelFormat, labelDelimiter){\n    const type = scale.invertExtent ?\n            d3_quantLegend(scale, labelFormat, labelDelimiter) : scale.ticks ?\n            d3_linearLegend(scale, cells, labelFormat) : d3_ordinalLegend(scale);\n\n    type.labels = d3_mergeLabels(type.labels, labels, scale.domain(), scale.range());\n\n    if (ascending) {\n      type.labels = d3_reverse(type.labels);\n      type.data = d3_reverse(type.data);\n    }\n\n    return type;\n  },\n\n  d3_filterCells: (type, cellFilter) => {\n    let filterCells = type.data.map((d, i) => ({ data: d, label: type.labels[i] }))\n      .filter(cellFilter)\n    const dataValues = filterCells.map(d => d.data)\n    const labelValues = filterCells.map(d => d.label)\n    type.data = type.data.filter(d => dataValues.indexOf(d) !== -1)\n    type.labels = type.labels.filter(d => labelValues.indexOf(d) !== -1)\n    return type\n  },\n\n  d3_placement: (orient, cell, cellTrans, text, textTrans, labelAlign) => {\n    cell.attr(\"transform\", cellTrans);\n    text.attr(\"transform\", textTrans);\n    if (orient === \"horizontal\"){\n      text.style(\"text-anchor\", labelAlign);\n    }\n  },\n\n  d3_addEvents: function(cells, dispatcher){\n      cells.on(\"mouseover.legend\", function (d) { d3_cellOver(dispatcher, d, this); })\n          .on(\"mouseout.legend\", function (d) { d3_cellOut(dispatcher, d, this); })\n          .on(\"click.legend\", function (d) { d3_cellClick(dispatcher, d, this); });\n  },\n\n  d3_title: (svg, title, classPrefix, titleWidth) => {\n    if (title !== \"\"){\n\n      const titleText = svg.selectAll('text.' + classPrefix + 'legendTitle');\n\n      titleText.data([title])\n        .enter()\n        .append('text')\n        .attr('class', classPrefix + 'legendTitle');\n\n      svg.selectAll('text.' + classPrefix + 'legendTitle')\n        .text(title)\n\n      if (titleWidth){\n        svg.selectAll('text.' + classPrefix + 'legendTitle')\n          .call(d3_textWrapping, titleWidth)\n      }\n      \n      const cellsSvg = svg.select('.' + classPrefix + 'legendCells')\n      const yOffset = svg.select('.' + classPrefix + 'legendTitle').nodes()\n          .map(d => d.getBBox().height)[0],\n      \n      xOffset = -cellsSvg.nodes().map(function(d) { return d.getBBox().x})[0];\n      cellsSvg.attr('transform', 'translate(' + xOffset + ',' + (yOffset) + ')');\n\n    }\n  }\n}\n","import helper from './legend';\nimport { dispatch } from 'd3-dispatch';\nimport { scaleLinear } from 'd3-scale';\nimport { format } from 'd3-format';\n\nexport default function color(){\n\n  let scale = scaleLinear(),\n    shape = \"rect\",\n    shapeWidth = 15,\n    shapeHeight = 15,\n    shapeRadius = 10,\n    shapePadding = 2,\n    cells = [5],\n    cellFilter,\n    labels = [],\n    classPrefix = \"\",\n    useClass = false,\n    title = \"\",\n    labelFormat = format(\".01f\"),\n    labelOffset = 10,\n    labelAlign = \"middle\",\n    labelDelimiter = \"to\",\n    labelWidth,\n    orient = \"vertical\",\n    ascending = false,\n    path,\n    titleWidth,\n    legendDispatcher = dispatch(\"cellover\", \"cellout\", \"cellclick\");\n\n  function legend(svg) {\n\n      const type = helper.d3_calcType(scale, ascending, cells, labels, labelFormat, labelDelimiter),\n        legendG = svg.selectAll('g').data([scale]);\n\n      legendG.enter().append('g').attr('class', classPrefix + 'legendCells');\n      \n      if (cellFilter){\n        helper.d3_filterCells(type, cellFilter)\n      }\n      \n      let cell = svg.select('.' + classPrefix + 'legendCells')\n          .selectAll(\".\" + classPrefix + \"cell\").data(type.data)\n\n      const cellEnter = cell.enter().append(\"g\")\n          .attr(\"class\", classPrefix + \"cell\")\n      cellEnter.append(shape).attr(\"class\", classPrefix + \"swatch\")\n\n      const shapes = svg.selectAll(\"g.\" + classPrefix + \"cell \" + shape);\n\n      //add event handlers\n      helper.d3_addEvents(cellEnter, legendDispatcher);\n\n      cell.exit().transition().style(\"opacity\", 0).remove();\n\n      helper.d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, path);\n      helper.d3_addText( svg, cellEnter, type.labels, classPrefix)\n\n      // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.\n      cell = cellEnter.merge(cell);\n\n      // sets placement\n      const text = cell.selectAll(\"text\"),\n        shapeSize = shapes.nodes().map( d => d.getBBox());\n      //sets scale\n      //everything is fill except for line which is stroke,\n      if (!useClass){\n        if (shape == \"line\"){\n          shapes.style(\"stroke\", type.feature);\n        } else {\n          shapes.style(\"fill\", type.feature);\n        }\n      } else {\n        shapes.attr(\"class\", d => `${classPrefix}swatch ${type.feature(d)}`);\n      }\n\n      let cellTrans,\n      textTrans,\n      textAlign = (labelAlign == \"start\") ? 0 : (labelAlign == \"middle\") ? 0.5 : 1;\n\n      //positions cells and text\n      if (orient === \"vertical\"){\n        cellTrans = (d,i) => `translate(0, ${i * (shapeSize[i].height + shapePadding)})`;\n        textTrans = (d,i) => `translate( ${(shapeSize[i].width + shapeSize[i].x +\n          labelOffset)}, ${(shapeSize[i].y + shapeSize[i].height/2 + 5)})`;\n\n      } else if (orient === \"horizontal\"){\n        cellTrans = (d,i) => `translate(${(i * (shapeSize[i].width + shapePadding))},0)`\n        textTrans = (d,i) => `translate(${(shapeSize[i].width*textAlign  + shapeSize[i].x)},\n          ${(shapeSize[i].height + shapeSize[i].y + labelOffset + 8)})`;\n      }\n\n      helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);\n      helper.d3_title(svg, title, classPrefix, titleWidth);\n\n      cell.transition().style(\"opacity\", 1);\n\n  }\n\n  legend.scale = function(_) {\n    if (!arguments.length) return scale;\n    scale = _;\n    return legend;\n  };\n\n  legend.cells = function(_) {\n    if (!arguments.length) return cells;\n    if (_.length > 1 || _ >= 2 ){\n      cells = _;\n    }\n    return legend;\n  };\n\n  legend.cellFilter = function(_) {\n    if (!arguments.length) return cellFilter;\n    cellFilter = _;\n    return legend;\n  };\n\n  legend.shape = function(_, d) {\n    if (!arguments.length) return shape;\n    if (_ == \"rect\" || _ == \"circle\" || _ == \"line\" || (_ == \"path\" && (typeof d === 'string')) ){\n      shape = _;\n      path = d;\n    }\n    return legend;\n  };\n\n  legend.shapeWidth = function(_) {\n    if (!arguments.length) return shapeWidth;\n    shapeWidth = +_;\n    return legend;\n  };\n\n  legend.shapeHeight = function(_) {\n    if (!arguments.length) return shapeHeight;\n    shapeHeight = +_;\n    return legend;\n  };\n\n  legend.shapeRadius = function(_) {\n    if (!arguments.length) return shapeRadius;\n    shapeRadius = +_;\n    return legend;\n  };\n\n  legend.shapePadding = function(_) {\n    if (!arguments.length) return shapePadding;\n    shapePadding = +_;\n    return legend;\n  };\n\n  legend.labels = function(_) {\n    if (!arguments.length) return labels;\n    labels = _;\n    return legend;\n  };\n\n  legend.labelAlign = function(_) {\n    if (!arguments.length) return labelAlign;\n    if (_ == \"start\" || _ == \"end\" || _ == \"middle\") {\n      labelAlign = _;\n    }\n    return legend;\n  };\n\n  legend.labelFormat = function(_) {\n    if (!arguments.length) return labelFormat;\n    labelFormat = typeof(_) === 'string' ? format(_) : _;\n    return legend;\n  };\n\n  legend.labelOffset = function(_) {\n    if (!arguments.length) return labelOffset;\n    labelOffset = +_;\n    return legend;\n  };\n\n  legend.labelDelimiter = function(_) {\n    if (!arguments.length) return labelDelimiter;\n    labelDelimiter = _;\n    return legend;\n  };\n\n  legend.labelWidth = function(_) {\n    if (!arguments.length) return labelWidth;\n    labelWidth = _;\n    return legend;\n  };\n\n  legend.useClass = function(_) {\n    if (!arguments.length) return useClass;\n    if (_ === true || _ === false){\n      useClass = _;\n    }\n    return legend;\n  };\n\n  legend.orient = function(_){\n    if (!arguments.length) return orient;\n    _ = _.toLowerCase();\n    if (_ == \"horizontal\" || _ == \"vertical\") {\n      orient = _;\n    }\n    return legend;\n  };\n\n  legend.ascending = function(_) {\n    if (!arguments.length) return ascending;\n    ascending = !!_;\n    return legend;\n  };\n\n  legend.classPrefix = function(_) {\n    if (!arguments.length) return classPrefix;\n    classPrefix = _;\n    return legend;\n  };\n\n  legend.title = function(_) {\n    if (!arguments.length) return title;\n    title = _;\n    return legend;\n  };\n\n  legend.titleWidth = function(_) {\n    if (!arguments.length) return titleWidth;\n    titleWidth = _;\n    return legend;\n  };\n\n  legend.on = function(){\n    const value = legendDispatcher.on.apply(legendDispatcher, arguments)\n    return value === legendDispatcher ? legend : value;\n  }\n\n  return legend;\n\n};\n","import helper from './legend';\nimport { dispatch } from 'd3-dispatch';\nimport { scaleLinear } from 'd3-scale';\nimport { format } from 'd3-format';\nimport { sum, max } from 'd3-array';\n\nexport default function size(){\n\n  let scale = scaleLinear(),\n    shape = \"rect\",\n    shapeWidth = 15,\n    shapePadding = 2,\n    cells = [5],\n    cellFilter,\n    labels = [],\n    classPrefix = \"\",\n    title = \"\",\n    labelFormat = format(\".01f\"),\n    labelOffset = 10,\n    labelAlign = \"middle\",\n    labelDelimiter = \"to\",\n    labelWidth,\n    orient = \"vertical\",\n    ascending = false,\n    path,\n    titleWidth,\n    legendDispatcher = dispatch(\"cellover\", \"cellout\", \"cellclick\");\n\n    function legend(svg){\n\n      const type = helper.d3_calcType(scale, ascending, cells, labels, labelFormat, labelDelimiter),\n        legendG = svg.selectAll('g').data([scale]);\n\n      if (cellFilter){\n        helper.d3_filterCells(type, cellFilter)\n      }\n\n      legendG.enter().append('g').attr('class', classPrefix + 'legendCells');\n\n      let cell = svg.select('.' + classPrefix + 'legendCells')\n          .selectAll(\".\" + classPrefix + \"cell\").data(type.data)\n      const cellEnter = cell.enter().append(\"g\")\n          .attr(\"class\", classPrefix + \"cell\")\n      cellEnter.append(shape).attr(\"class\", classPrefix + \"swatch\")\n\n      const shapes = svg.selectAll(\"g.\" + classPrefix + \"cell \" + shape);\n\n      //add event handlers\n      helper.d3_addEvents(cellEnter, legendDispatcher);\n\n      cell.exit().transition().style(\"opacity\", 0).remove();\n\n      //creates shape\n      if (shape === \"line\"){\n        helper.d3_drawShapes(shape, shapes, 0, shapeWidth);\n        shapes.attr(\"stroke-width\", type.feature);\n      } else {\n        helper.d3_drawShapes(shape, shapes, type.feature, type.feature, type.feature, path);\n      }\n\n      helper.d3_addText( svg, cellEnter, type.labels, classPrefix)\n\n      // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.\n      cell = cellEnter.merge(cell);\n\n      //sets placement\n      const text = cell.selectAll(\"text\"),\n        shapeSize = shapes.nodes().map(\n          (d, i) => {\n            const bbox = d.getBBox()\n            const stroke = scale(type.data[i]);\n\n            if (shape === \"line\" && orient === \"horizontal\") {\n              bbox.height = bbox.height + stroke;\n            } else if (shape === \"line\" && orient === \"vertical\"){\n              bbox.width = bbox.width;\n            }\n\n            return bbox;\n        });\n\n      const maxH = max(shapeSize, d => d.height + d.y),\n      maxW = max(shapeSize, d => d.width + d.x);\n\n      let cellTrans,\n      textTrans,\n      textAlign = (labelAlign == \"start\") ? 0 : (labelAlign == \"middle\") ? 0.5 : 1;\n\n      //positions cells and text\n      if (orient === \"vertical\"){\n\n        cellTrans = (d,i) => {\n            const height = sum(shapeSize.slice(0, i + 1 ), d => d.height);\n            return `translate(0, ${(height + i*shapePadding)})`};\n\n        textTrans = (d,i) => `translate( ${(maxW + labelOffset)},\n          ${(shapeSize[i].y + shapeSize[i].height/2 + 5)})`;\n\n      } else if (orient === \"horizontal\"){\n        cellTrans = (d,i) => {\n            const width = sum(shapeSize.slice(0, i + 1 ), d => d.width);\n            return `translate(${(width + i*shapePadding)},0)`; };\n\n        textTrans = (d,i) => `translate( ${(shapeSize[i].width*textAlign  + shapeSize[i].x)},\n              ${(maxH + labelOffset )})`;\n      }\n\n      helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);\n      helper.d3_title(svg, title, classPrefix, titleWidth);\n\n      cell.transition().style(\"opacity\", 1);\n\n    }\n\n  legend.scale = function(_) {\n    if (!arguments.length) return scale;\n    scale = _;\n    return legend;\n  };\n\n  legend.cells = function(_) {\n    if (!arguments.length) return cells;\n    if (_.length > 1 || _ >= 2 ){\n      cells = _;\n    }\n    return legend;\n  };\n\n  legend.cellFilter = function(_) {\n    if (!arguments.length) return cellFilter;\n    cellFilter = _;\n    return legend;\n  };\n  \n  legend.shape = function(_, d) {\n    if (!arguments.length) return shape;\n    if (_ == \"rect\" || _ == \"circle\" || _ == \"line\" ){\n      shape = _;\n      path = d;\n    }\n    return legend;\n  };\n\n  legend.shapeWidth = function(_) {\n    if (!arguments.length) return shapeWidth;\n    shapeWidth = +_;\n    return legend;\n  };\n\n  legend.shapePadding = function(_) {\n    if (!arguments.length) return shapePadding;\n    shapePadding = +_;\n    return legend;\n  };\n\n  legend.labels = function(_) {\n    if (!arguments.length) return labels;\n    labels = _;\n    return legend;\n  };\n\n  legend.labelAlign = function(_) {\n    if (!arguments.length) return labelAlign;\n    if (_ == \"start\" || _ == \"end\" || _ == \"middle\") {\n      labelAlign = _;\n    }\n    return legend;\n  };\n\n  legend.labelFormat = function(_) {\n    if (!arguments.length) return labelFormat;\n    labelFormat = typeof(_) === 'string' ? format(_) : _;\n    return legend;\n  };\n\n  legend.labelOffset = function(_) {\n    if (!arguments.length) return labelOffset;\n    labelOffset = +_;\n    return legend;\n  };\n\n  legend.labelDelimiter = function(_) {\n    if (!arguments.length) return labelDelimiter;\n    labelDelimiter = _;\n    return legend;\n  };\n\n  legend.labelWidth = function(_) {\n    if (!arguments.length) return labelWidth;\n    labelWidth = _;\n    return legend;\n  };\n\n  legend.orient = function(_){\n    if (!arguments.length) return orient;\n    _ = _.toLowerCase();\n    if (_ == \"horizontal\" || _ == \"vertical\") {\n      orient = _;\n    }\n    return legend;\n  };\n\n  legend.ascending = function(_) {\n    if (!arguments.length) return ascending;\n    ascending = !!_;\n    return legend;\n  };\n\n  legend.classPrefix = function(_) {\n    if (!arguments.length) return classPrefix;\n    classPrefix = _;\n    return legend;\n  };\n\n  legend.title = function(_) {\n    if (!arguments.length) return title;\n    title = _;\n    return legend;\n  };\n\n  legend.titleWidth = function(_) {\n    if (!arguments.length) return titleWidth;\n    titleWidth = _;\n    return legend;\n  };\n\n  legend.on = function(){\n    const value = legendDispatcher.on.apply(legendDispatcher, arguments)\n    return value === legendDispatcher ? legend : value;\n  }\n\n  return legend;\n\n};\n","import helper from './legend';\nimport { dispatch } from 'd3-dispatch';\nimport { scaleLinear } from 'd3-scale';\nimport { format } from 'd3-format';\nimport { max } from 'd3-array';\n\nexport default function symbol(){\n\n  let scale = scaleLinear(),\n    shape = \"path\",\n    shapeWidth = 15,\n    shapeHeight = 15,\n    shapeRadius = 10,\n    shapePadding = 5,\n    cells = [5],\n    cellFilter,\n    labels = [],\n    classPrefix = \"\",\n    title = \"\",\n    labelFormat = format(\".01f\"),\n    labelAlign = \"middle\",\n    labelOffset = 10,\n    labelDelimiter = \"to\",\n    labelWidth,\n    orient = \"vertical\",\n    ascending = false,\n    titleWidth,\n    legendDispatcher = dispatch(\"cellover\", \"cellout\", \"cellclick\");\n\n    function legend(svg){\n\n      const type = helper.d3_calcType(scale, ascending, cells, labels, labelFormat, labelDelimiter),\n        legendG = svg.selectAll('g').data([scale]);\n\n      if (cellFilter){\n        helper.d3_filterCells(type, cellFilter)\n      }\n\n      legendG.enter().append('g').attr('class', classPrefix + 'legendCells');\n\n      let cell = svg.select('.' + classPrefix + 'legendCells')\n          .selectAll(\".\" + classPrefix + \"cell\").data(type.data)\n      const cellEnter = cell.enter().append(\"g\")\n          .attr(\"class\", classPrefix + \"cell\")\n      cellEnter.append(shape).attr(\"class\", classPrefix + \"swatch\")\n\n      const shapes = svg.selectAll(\"g.\" + classPrefix + \"cell \" + shape);\n\n      //add event handlers\n      helper.d3_addEvents(cellEnter, legendDispatcher);\n\n      //remove old shapes\n      cell.exit().transition().style(\"opacity\", 0).remove();\n\n      helper.d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, type.feature);\n      helper.d3_addText( svg, cellEnter, type.labels, classPrefix, labelWidth)\n\n      // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.\n      cell = cellEnter.merge(cell);\n\n      // sets placement\n      const text = cell.selectAll(\"text\"),\n        shapeSize = shapes.nodes().map( d => d.getBBox());\n\n      const maxH = max(shapeSize, d => d.height),\n      maxW = max(shapeSize, d => d.width);\n\n      let cellTrans,\n      textTrans,\n      textAlign = (labelAlign == \"start\") ? 0 : (labelAlign == \"middle\") ? 0.5 : 1;\n\n      //positions cells and text\n      if (orient === \"vertical\"){\n        cellTrans = (d,i) => `translate(0, ${(i * (maxH + shapePadding))} )`;\n        textTrans = (d,i) => `translate( ${(maxW + labelOffset)},\n              ${(shapeSize[i].y + shapeSize[i].height/2 + 5)})`;\n\n      } else if (orient === \"horizontal\"){\n        cellTrans = (d,i) => `translate( ${(i * (maxW + shapePadding))},0)`;\n        textTrans = (d,i) => `translate( ${(shapeSize[i].width*textAlign  + shapeSize[i].x)},\n              ${(maxH + labelOffset )})`;\n      }\n\n      helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);\n      helper.d3_title(svg, title, classPrefix, titleWidth);\n      cell.transition().style(\"opacity\", 1);\n\n    }\n\n\n  legend.scale = function(_) {\n    if (!arguments.length) return scale;\n    scale = _;\n    return legend;\n  };\n\n  legend.cells = function(_) {\n    if (!arguments.length) return cells;\n    if (_.length > 1 || _ >= 2 ){\n      cells = _;\n    }\n    return legend;\n  };\n  \n  legend.cellFilter = function(_) {\n    if (!arguments.length) return cellFilter;\n    cellFilter = _;\n    return legend;\n  };\n\n  legend.shapePadding = function(_) {\n    if (!arguments.length) return shapePadding;\n    shapePadding = +_;\n    return legend;\n  };\n\n  legend.labels = function(_) {\n    if (!arguments.length) return labels;\n    labels = _;\n    return legend;\n  };\n\n  legend.labelAlign = function(_) {\n    if (!arguments.length) return labelAlign;\n    if (_ == \"start\" || _ == \"end\" || _ == \"middle\") {\n      labelAlign = _;\n    }\n    return legend;\n  };\n\n  legend.labelFormat = function(_) {\n    if (!arguments.length) return labelFormat;\n    labelFormat = typeof(_) === 'string' ? format(_) : _;\n    return legend;\n  };\n\n  legend.labelOffset = function(_) {\n    if (!arguments.length) return labelOffset;\n    labelOffset = +_;\n    return legend;\n  };\n\n  legend.labelDelimiter = function(_) {\n    if (!arguments.length) return labelDelimiter;\n    labelDelimiter = _;\n    return legend;\n  };\n\n  legend.labelWidth = function(_) {\n    if (!arguments.length) return labelWidth;\n    labelWidth = _;\n    return legend;\n  };\n\n  legend.orient = function(_){\n    if (!arguments.length) return orient;\n    _ = _.toLowerCase();\n    if (_ == \"horizontal\" || _ == \"vertical\") {\n      orient = _;\n    }\n    return legend;\n  };\n\n  legend.ascending = function(_) {\n    if (!arguments.length) return ascending;\n    ascending = !!_;\n    return legend;\n  };\n\n  legend.classPrefix = function(_) {\n    if (!arguments.length) return classPrefix;\n    classPrefix = _;\n    return legend;\n  };\n\n  legend.title = function(_) {\n    if (!arguments.length) return title;\n    title = _;\n    return legend;\n  };\n\n  legend.titleWidth = function(_) {\n    if (!arguments.length) return titleWidth;\n    titleWidth = _;\n    return legend;\n  };\n\n  legend.on = function(){\n    const value = legendDispatcher.on.apply(legendDispatcher, arguments)\n    return value === legendDispatcher ? legend : value;\n  }\n\n  return legend;\n\n};\n","export const thresholdLabels = function({ i, genLength, generatedLabels }){\n\n  if (i === 0 ){\n    return generatedLabels[i].replace('NaN to', 'Less than')\n  } else if (i === genLength - 1) {\n    return `More than ${generatedLabels[genLength - 1].replace(' to NaN', '')}`\n  }\n  return generatedLabels[i]\n}\n\nexport default {\n  thresholdLabels\n}\n","import legendColor from './src/color'\nimport legendSize from './src/size'\nimport legendSymbol from './src/symbol'\nimport legendHelpers from './src/helpers'\n\nexport { legendColor, legendSize, legendSymbol, legendHelpers }\n\nexport default {\n  legendColor,\n  legendSize,\n  legendSymbol,\n  legendHelpers\n};\n"],"names":["d3_identity","d","d3_reverse","arr","mirror","i","l","length","d3_textWrapping","text","width","each","select","words","split","reverse","word","line","lineNumber","lineHeight","y","attr","dy","parseFloat","tspan","append","pop","push","join","node","getComputedTextLength","d3_mergeLabels","gen","labels","domain","range","customLabels","genLength","generatedLabels","d3_linearLegend","scale","cells","labelFormat","data","increment","map","feature","d3_quantLegend","labelDelimiter","invert","invertExtent","d3_ordinalLegend","d3_cellOver","cellDispatcher","obj","call","d3_cellOut","d3_cellClick","d3_drawShapes","shape","shapes","shapeHeight","shapeWidth","shapeRadius","path","d3_addText","svg","enter","classPrefix","labelWidth","selectAll","d3_calcType","ascending","type","ticks","d3_filterCells","cellFilter","filterCells","label","filter","dataValues","labelValues","indexOf","d3_placement","orient","cell","cellTrans","textTrans","labelAlign","style","d3_addEvents","dispatcher","on","d3_title","title","titleWidth","titleText","cellsSvg","yOffset","nodes","getBBox","height","xOffset","x","color","scaleLinear","shapePadding","useClass","format","labelOffset","legendDispatcher","dispatch","legend","helper","legendG","cellEnter","exit","transition","remove","merge","shapeSize","textAlign","_","arguments","toLowerCase","value","apply","size","bbox","stroke","maxH","max","maxW","sum","slice","symbol","thresholdLabels","replace","legendColor","legendSize","legendSymbol","legendHelpers"],"mappings":"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"}